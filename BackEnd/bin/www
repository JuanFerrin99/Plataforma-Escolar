const app = require('../app');
const debug = require('debug')('TP_API:server');
const http = require('http');
const { connectToDB } = require('../src/utils/dbUtils');
const { newSocket, deleteSocket, handleSocket } = require('../src/utils/sockets');


const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);
const server = http.createServer(app);


(() => {
    connectToDB()
        .then(() => {
            console.log("Conectado a la DB")
            server.listen(port);
            server.on('error', onError);
            server.on('listening', onListening);
        })
        .catch(error => {
            console.log("Error de mongoose", error)
        })
})()

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log("Ejecutando en el puerto ", bind)
}


//----------------------------------------------- WEB SOCKETS ----------------------------------------------------

options = {
    cors: {
        origin: "http://localhost:3000",
        methods: ["GET", "POST"]
    }
}

const io = require("socket.io")(server, options);
const sockets = {}

io.on("connection", socket => {
    socket.on('connected', (mail) => {
        //newSocket(mail, socket)
        sockets[mail] = socket.id
        console.log('User connected');
    });
    /*
    socket.on('nuevo curso', (mail, nota) => {
        socketMail = handleSocket(mail)
        if (socketMail != undefined) {
            io.to(socketMail).emit("agregar nota", nota)
        }
    });
    */
    socket.on('disconnect', () => {
        //deleteSocket(socket)
        delete sockets[getKeyByValue(sockets, socket.id)]
        console.log('User disconnected');
    })
})

function getKeyByValue(object, value) {
    return Object.keys(object).find(key => object[key] === value);
}

module.exports.funcionEmit = function (mail, datosCurso) {
    if (sockets[mail] != undefined) {
        io.to(sockets[mail]).emit("nuevo curso", datosCurso)
    }
}