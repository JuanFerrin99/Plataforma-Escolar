const app = require('../app');
const debug = require('debug')('TP_API:server');
const http = require('http');
const { connectToDB } = require('../src/utils/dbUtils');


const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);
const server = http.createServer(app);


(() => {
    connectToDB()
        .then(() => {
            console.log("Conectado a la DB")
            server.listen(port);
            server.on('error', onError);
            server.on('listening', onListening);
        })
        .catch(error => {
            console.log("Error de mongoose", error)
        })
})()

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }
    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log("Ejecutando en el puerto ", bind)
}


//----------------------------------------------- WEB SOCKETS ----------------------------------------------------

const webSocketsServerPort = 8000;
const webSocketServer = require('websocket').server;

const socketServer = http.createServer();
socketServer.listen(webSocketsServerPort);
const wsServer = new webSocketServer({
    httpServer: socketServer
});


const clients = {};
const getUniqueID = () => {
    const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    return s4() + s4() + '-' + s4();
};

wsServer.on('request', function (request) {
    var userID = getUniqueID();
    console.log((new Date()) + ' Recieved a new connection from origin ' + request.origin + '.');
    // You can rewrite this part of the code to accept only the requests from allowed origin
    const connection = request.accept(null, request.origin);
    clients[userID] = connection;
    console.log('connected: ' + userID + ' in ' + Object.getOwnPropertyNames(clients))

    connection.on('message', function (message) {
        if (message.type === 'utf8') {
            console.log('Received Message: ', message.utf8Data);

            // broadcasting message to all connected clients
            for (key in clients) {
                clients[key].sendUTF(message.utf8Data);
                console.log('sent Message to: ', clients[key]);
            }
        }
    })
});